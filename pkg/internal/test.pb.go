// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: test.proto

package internal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumType int32

const (
	EnumType_TEST    EnumType = 0
	EnumType_ANOTHER EnumType = 1
)

// Enum value maps for EnumType.
var (
	EnumType_name = map[int32]string{
		0: "TEST",
		1: "ANOTHER",
	}
	EnumType_value = map[string]int32{
		"TEST":    0,
		"ANOTHER": 1,
	}
)

func (x EnumType) Enum() *EnumType {
	p := new(EnumType)
	*p = x
	return p
}

func (x EnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (EnumType) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x EnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumType.Descriptor instead.
func (EnumType) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *Embed `protobuf:"bytes,1,opt,name=Field,proto3" json:"Field,omitempty"`
	// Types that are assignable to Variant:
	//	*Msg_A
	//	*Msg_B
	//	*Msg_C
	Variant  isMsg_Variant       `protobuf_oneof:"Variant"`
	MapField map[string]*Embed   `protobuf:"bytes,15,rep,name=MapField,proto3" json:"MapField,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepField []*Embed            `protobuf:"bytes,20,rep,name=RepField,proto3" json:"RepField,omitempty"`
	En       EnumType            `protobuf:"varint,25,opt,name=En,proto3,enum=test.EnumType" json:"En,omitempty"`
	RepEnum  []EnumType          `protobuf:"varint,30,rep,packed,name=RepEnum,proto3,enum=test.EnumType" json:"RepEnum,omitempty"`
	MapEnum  map[uint32]EnumType `protobuf:"bytes,50,rep,name=MapEnum,proto3" json:"MapEnum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=test.EnumType"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *Msg) GetField() *Embed {
	if x != nil {
		return x.Field
	}
	return nil
}

func (m *Msg) GetVariant() isMsg_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *Msg) GetA() string {
	if x, ok := x.GetVariant().(*Msg_A); ok {
		return x.A
	}
	return ""
}

func (x *Msg) GetB() string {
	if x, ok := x.GetVariant().(*Msg_B); ok {
		return x.B
	}
	return ""
}

func (x *Msg) GetC() *Embed {
	if x, ok := x.GetVariant().(*Msg_C); ok {
		return x.C
	}
	return nil
}

func (x *Msg) GetMapField() map[string]*Embed {
	if x != nil {
		return x.MapField
	}
	return nil
}

func (x *Msg) GetRepField() []*Embed {
	if x != nil {
		return x.RepField
	}
	return nil
}

func (x *Msg) GetEn() EnumType {
	if x != nil {
		return x.En
	}
	return EnumType_TEST
}

func (x *Msg) GetRepEnum() []EnumType {
	if x != nil {
		return x.RepEnum
	}
	return nil
}

func (x *Msg) GetMapEnum() map[uint32]EnumType {
	if x != nil {
		return x.MapEnum
	}
	return nil
}

type isMsg_Variant interface {
	isMsg_Variant()
}

type Msg_A struct {
	A string `protobuf:"bytes,2,opt,name=A,proto3,oneof"`
}

type Msg_B struct {
	B string `protobuf:"bytes,3,opt,name=B,proto3,oneof"`
}

type Msg_C struct {
	C *Embed `protobuf:"bytes,4,opt,name=C,proto3,oneof"`
}

func (*Msg_A) isMsg_Variant() {}

func (*Msg_B) isMsg_Variant() {}

func (*Msg_C) isMsg_Variant() {}

type Embed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,2,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *Embed) Reset() {
	*x = Embed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Embed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Embed) ProtoMessage() {}

func (x *Embed) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Embed.ProtoReflect.Descriptor instead.
func (*Embed) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *Embed) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type WKT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmptyField        *emptypb.Empty            `protobuf:"bytes,1,opt,name=EmptyField,proto3" json:"EmptyField,omitempty"`
	RepEmptyField     []*emptypb.Empty          `protobuf:"bytes,2,rep,name=RepEmptyField,proto3" json:"RepEmptyField,omitempty"`
	DurationField     *durationpb.Duration      `protobuf:"bytes,3,opt,name=DurationField,proto3" json:"DurationField,omitempty"`
	RepDurationField  []*durationpb.Duration    `protobuf:"bytes,4,rep,name=RepDurationField,proto3" json:"RepDurationField,omitempty"`
	TimestampField    *timestamppb.Timestamp    `protobuf:"bytes,5,opt,name=TimestampField,proto3" json:"TimestampField,omitempty"`
	RepTimestampField []*timestamppb.Timestamp  `protobuf:"bytes,6,rep,name=RepTimestampField,proto3" json:"RepTimestampField,omitempty"`
	StructField       *structpb.Struct          `protobuf:"bytes,7,opt,name=StructField,proto3" json:"StructField,omitempty"`
	RepStructField    []*structpb.Struct        `protobuf:"bytes,8,rep,name=RepStructField,proto3" json:"RepStructField,omitempty"`
	ValueField        *structpb.Value           `protobuf:"bytes,9,opt,name=ValueField,proto3" json:"ValueField,omitempty"`
	RepValueField     []*structpb.Value         `protobuf:"bytes,10,rep,name=RepValueField,proto3" json:"RepValueField,omitempty"`
	BoolField         *wrapperspb.BoolValue     `protobuf:"bytes,11,opt,name=BoolField,proto3" json:"BoolField,omitempty"`
	RepBoolField      []*wrapperspb.BoolValue   `protobuf:"bytes,12,rep,name=RepBoolField,proto3" json:"RepBoolField,omitempty"`
	BytesField        *wrapperspb.BytesValue    `protobuf:"bytes,13,opt,name=BytesField,proto3" json:"BytesField,omitempty"`
	RepBytesField     []*wrapperspb.BytesValue  `protobuf:"bytes,14,rep,name=RepBytesField,proto3" json:"RepBytesField,omitempty"`
	StringField       *wrapperspb.StringValue   `protobuf:"bytes,15,opt,name=StringField,proto3" json:"StringField,omitempty"`
	RepStringField    []*wrapperspb.StringValue `protobuf:"bytes,16,rep,name=RepStringField,proto3" json:"RepStringField,omitempty"`
	Int32Field        *wrapperspb.Int32Value    `protobuf:"bytes,17,opt,name=Int32Field,proto3" json:"Int32Field,omitempty"`
	RepInt32Field     []*wrapperspb.Int32Value  `protobuf:"bytes,18,rep,name=RepInt32Field,proto3" json:"RepInt32Field,omitempty"`
	Int64Field        *wrapperspb.Int64Value    `protobuf:"bytes,19,opt,name=Int64Field,proto3" json:"Int64Field,omitempty"`
	RepInt64Field     []*wrapperspb.Int64Value  `protobuf:"bytes,20,rep,name=RepInt64Field,proto3" json:"RepInt64Field,omitempty"`
	UInt32Field       *wrapperspb.UInt32Value   `protobuf:"bytes,21,opt,name=UInt32Field,proto3" json:"UInt32Field,omitempty"`
	RepUInt32Field    []*wrapperspb.UInt32Value `protobuf:"bytes,22,rep,name=RepUInt32Field,proto3" json:"RepUInt32Field,omitempty"`
	UInt64Field       *wrapperspb.UInt64Value   `protobuf:"bytes,23,opt,name=UInt64Field,proto3" json:"UInt64Field,omitempty"`
	RepUInt64Field    []*wrapperspb.UInt64Value `protobuf:"bytes,24,rep,name=RepUInt64Field,proto3" json:"RepUInt64Field,omitempty"`
	FloatField        *wrapperspb.FloatValue    `protobuf:"bytes,25,opt,name=FloatField,proto3" json:"FloatField,omitempty"`
	RepFloatField     []*wrapperspb.FloatValue  `protobuf:"bytes,26,rep,name=RepFloatField,proto3" json:"RepFloatField,omitempty"`
	DoubleField       *wrapperspb.DoubleValue   `protobuf:"bytes,27,opt,name=DoubleField,proto3" json:"DoubleField,omitempty"`
	RepDoubleField    []*wrapperspb.DoubleValue `protobuf:"bytes,28,rep,name=RepDoubleField,proto3" json:"RepDoubleField,omitempty"`
}

func (x *WKT) Reset() {
	*x = WKT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WKT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WKT) ProtoMessage() {}

func (x *WKT) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WKT.ProtoReflect.Descriptor instead.
func (*WKT) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2}
}

func (x *WKT) GetEmptyField() *emptypb.Empty {
	if x != nil {
		return x.EmptyField
	}
	return nil
}

func (x *WKT) GetRepEmptyField() []*emptypb.Empty {
	if x != nil {
		return x.RepEmptyField
	}
	return nil
}

func (x *WKT) GetDurationField() *durationpb.Duration {
	if x != nil {
		return x.DurationField
	}
	return nil
}

func (x *WKT) GetRepDurationField() []*durationpb.Duration {
	if x != nil {
		return x.RepDurationField
	}
	return nil
}

func (x *WKT) GetTimestampField() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampField
	}
	return nil
}

func (x *WKT) GetRepTimestampField() []*timestamppb.Timestamp {
	if x != nil {
		return x.RepTimestampField
	}
	return nil
}

func (x *WKT) GetStructField() *structpb.Struct {
	if x != nil {
		return x.StructField
	}
	return nil
}

func (x *WKT) GetRepStructField() []*structpb.Struct {
	if x != nil {
		return x.RepStructField
	}
	return nil
}

func (x *WKT) GetValueField() *structpb.Value {
	if x != nil {
		return x.ValueField
	}
	return nil
}

func (x *WKT) GetRepValueField() []*structpb.Value {
	if x != nil {
		return x.RepValueField
	}
	return nil
}

func (x *WKT) GetBoolField() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolField
	}
	return nil
}

func (x *WKT) GetRepBoolField() []*wrapperspb.BoolValue {
	if x != nil {
		return x.RepBoolField
	}
	return nil
}

func (x *WKT) GetBytesField() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesField
	}
	return nil
}

func (x *WKT) GetRepBytesField() []*wrapperspb.BytesValue {
	if x != nil {
		return x.RepBytesField
	}
	return nil
}

func (x *WKT) GetStringField() *wrapperspb.StringValue {
	if x != nil {
		return x.StringField
	}
	return nil
}

func (x *WKT) GetRepStringField() []*wrapperspb.StringValue {
	if x != nil {
		return x.RepStringField
	}
	return nil
}

func (x *WKT) GetInt32Field() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Field
	}
	return nil
}

func (x *WKT) GetRepInt32Field() []*wrapperspb.Int32Value {
	if x != nil {
		return x.RepInt32Field
	}
	return nil
}

func (x *WKT) GetInt64Field() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Field
	}
	return nil
}

func (x *WKT) GetRepInt64Field() []*wrapperspb.Int64Value {
	if x != nil {
		return x.RepInt64Field
	}
	return nil
}

func (x *WKT) GetUInt32Field() *wrapperspb.UInt32Value {
	if x != nil {
		return x.UInt32Field
	}
	return nil
}

func (x *WKT) GetRepUInt32Field() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.RepUInt32Field
	}
	return nil
}

func (x *WKT) GetUInt64Field() *wrapperspb.UInt64Value {
	if x != nil {
		return x.UInt64Field
	}
	return nil
}

func (x *WKT) GetRepUInt64Field() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.RepUInt64Field
	}
	return nil
}

func (x *WKT) GetFloatField() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatField
	}
	return nil
}

func (x *WKT) GetRepFloatField() []*wrapperspb.FloatValue {
	if x != nil {
		return x.RepFloatField
	}
	return nil
}

func (x *WKT) GetDoubleField() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleField
	}
	return nil
}

func (x *WKT) GetRepDoubleField() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.RepDoubleField
	}
	return nil
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0,
	0x03, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x52, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x01, 0x41, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01, 0x41, 0x12, 0x0e, 0x0a, 0x01, 0x42, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01, 0x42, 0x12, 0x1b, 0x0a, 0x01, 0x43, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x01, 0x43, 0x12, 0x33, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x52,
	0x65, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x08, 0x52, 0x65, 0x70, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x02, 0x45, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x02, 0x45, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x52, 0x65, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x30,
	0x0a, 0x07, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x73, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d,
	0x1a, 0x48, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x0c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x22, 0x1b, 0x0a, 0x05, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x95,
	0x0e, 0x0a, 0x03, 0x57, 0x4b, 0x54, 0x12, 0x36, 0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x0a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3c,
	0x0a, 0x0d, 0x52, 0x65, 0x70, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d, 0x52,
	0x65, 0x70, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x0d,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x45, 0x0a,
	0x10, 0x52, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x52, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x52, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3f, 0x0a,
	0x0e, 0x52, 0x65, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e,
	0x52, 0x65, 0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x36,
	0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3e,
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x52, 0x65, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b,
	0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x52,
	0x65, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x52, 0x65, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3e,
	0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x44,
	0x0a, 0x0e, 0x52, 0x65, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x41, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x41, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x52, 0x65, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x3b, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x41, 0x0a,
	0x0d, 0x52, 0x65, 0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x3e, 0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x44, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2a, 0x21, 0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x64, 0x6d, 0x72, 0x63, 0x76, 0x2f, 0x67,
	0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_test_proto_goTypes = []interface{}{
	(EnumType)(0),                  // 0: test.EnumType
	(*Msg)(nil),                    // 1: test.Msg
	(*Embed)(nil),                  // 2: test.Embed
	(*WKT)(nil),                    // 3: test.WKT
	nil,                            // 4: test.Msg.MapFieldEntry
	nil,                            // 5: test.Msg.MapEnumEntry
	(*emptypb.Empty)(nil),          // 6: google.protobuf.Empty
	(*durationpb.Duration)(nil),    // 7: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),  // 8: google.protobuf.Timestamp
	(*structpb.Struct)(nil),        // 9: google.protobuf.Struct
	(*structpb.Value)(nil),         // 10: google.protobuf.Value
	(*wrapperspb.BoolValue)(nil),   // 11: google.protobuf.BoolValue
	(*wrapperspb.BytesValue)(nil),  // 12: google.protobuf.BytesValue
	(*wrapperspb.StringValue)(nil), // 13: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),  // 14: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),  // 15: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil), // 16: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil), // 17: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),  // 18: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil), // 19: google.protobuf.DoubleValue
}
var file_test_proto_depIdxs = []int32{
	2,  // 0: test.Msg.Field:type_name -> test.Embed
	2,  // 1: test.Msg.C:type_name -> test.Embed
	4,  // 2: test.Msg.MapField:type_name -> test.Msg.MapFieldEntry
	2,  // 3: test.Msg.RepField:type_name -> test.Embed
	0,  // 4: test.Msg.En:type_name -> test.EnumType
	0,  // 5: test.Msg.RepEnum:type_name -> test.EnumType
	5,  // 6: test.Msg.MapEnum:type_name -> test.Msg.MapEnumEntry
	6,  // 7: test.WKT.EmptyField:type_name -> google.protobuf.Empty
	6,  // 8: test.WKT.RepEmptyField:type_name -> google.protobuf.Empty
	7,  // 9: test.WKT.DurationField:type_name -> google.protobuf.Duration
	7,  // 10: test.WKT.RepDurationField:type_name -> google.protobuf.Duration
	8,  // 11: test.WKT.TimestampField:type_name -> google.protobuf.Timestamp
	8,  // 12: test.WKT.RepTimestampField:type_name -> google.protobuf.Timestamp
	9,  // 13: test.WKT.StructField:type_name -> google.protobuf.Struct
	9,  // 14: test.WKT.RepStructField:type_name -> google.protobuf.Struct
	10, // 15: test.WKT.ValueField:type_name -> google.protobuf.Value
	10, // 16: test.WKT.RepValueField:type_name -> google.protobuf.Value
	11, // 17: test.WKT.BoolField:type_name -> google.protobuf.BoolValue
	11, // 18: test.WKT.RepBoolField:type_name -> google.protobuf.BoolValue
	12, // 19: test.WKT.BytesField:type_name -> google.protobuf.BytesValue
	12, // 20: test.WKT.RepBytesField:type_name -> google.protobuf.BytesValue
	13, // 21: test.WKT.StringField:type_name -> google.protobuf.StringValue
	13, // 22: test.WKT.RepStringField:type_name -> google.protobuf.StringValue
	14, // 23: test.WKT.Int32Field:type_name -> google.protobuf.Int32Value
	14, // 24: test.WKT.RepInt32Field:type_name -> google.protobuf.Int32Value
	15, // 25: test.WKT.Int64Field:type_name -> google.protobuf.Int64Value
	15, // 26: test.WKT.RepInt64Field:type_name -> google.protobuf.Int64Value
	16, // 27: test.WKT.UInt32Field:type_name -> google.protobuf.UInt32Value
	16, // 28: test.WKT.RepUInt32Field:type_name -> google.protobuf.UInt32Value
	17, // 29: test.WKT.UInt64Field:type_name -> google.protobuf.UInt64Value
	17, // 30: test.WKT.RepUInt64Field:type_name -> google.protobuf.UInt64Value
	18, // 31: test.WKT.FloatField:type_name -> google.protobuf.FloatValue
	18, // 32: test.WKT.RepFloatField:type_name -> google.protobuf.FloatValue
	19, // 33: test.WKT.DoubleField:type_name -> google.protobuf.DoubleValue
	19, // 34: test.WKT.RepDoubleField:type_name -> google.protobuf.DoubleValue
	2,  // 35: test.Msg.MapFieldEntry.value:type_name -> test.Embed
	0,  // 36: test.Msg.MapEnumEntry.value:type_name -> test.EnumType
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Embed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WKT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Msg_A)(nil),
		(*Msg_B)(nil),
		(*Msg_C)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
